type Query {
  user(id: ID!, organization: ID!): User!
  conversation(id: ID!, organization: ID!): Conversation!
}

interface Node {
  id: ID!
}

enum EntityType {
  USER
  PARTICIPANT
  MESSAGE
}

"""
Chat User
"""
type User implements Node
  @entity(
    additionalFields: [
      { path: "pk", type: "string" }
      { path: "sk", type: "string" }
      { path: "organizationID", type: "string" }
      { path: "type", type: "EntityType" }
    ]
  ) {
  """
  Unique user ID
  """
  id: ID! @id
  givenName: String! @column
  familyName: String @column
  email: String @column
  phone: String @column
  conversations(limit: Int!, nextKey: String!): [Conversation!]!
}

"""
Conversation Participant
"""
type Participant
  @entity(
    additionalFields: [
      { path: "pk", type: "string" }
      { path: "sk", type: "string" }
      { path: "conversationID", type: "string" }
      { path: "userID", type: "string" }
      { path: "organizationID", type: "string" }
      { path: "type", type: "EntityType" }
    ]
  ) {
  conversation: Conversation!
  user: User!
}

"""
Conversation
"""
type Conversation implements Node {
  id: ID!
  participants: [User!]!
  messages(limit: Int!, nextKey: String!): [Message!]!
}

"""
Message
"""
type Message implements Node
  @entity(
    additionalFields: [
      { path: "pk", type: "string" }
      { path: "sk", type: "string" }
      { path: "organizationID", type: "string" }
      { path: "userID", type: "string" }
      { path: "conversationID", type: "string" }
      { path: "type", type: "EntityType" }
    ]
  ) {
  id: ID! @id
  conversation: Conversation!
  text: String! @column
}

type Mutation {
  addMessage(input: AddMessageInput!): Message!
  addParticipant(input: AddParticipantInput!): Conversation!
  updateUser(input: UpdateUserInput!): User!
}

input AddMessageInput {
  userID: ID!
  conversationID: ID!
  organizationID: ID!
  text: String!
}

input AddParticipantInput {
  conversationID: ID!
  organizationID: ID!
  userID: ID!
}

input UpdateUserInput {
  email: AWSEmail
  familyName: String
  givenName: String!
  id: ID!
  organizationID: ID!
  phone: AWSPhone
}

type Subscription {
  addedParticipant(input: AddedParticipantSubscriptionInput!): Conversation!
    @aws_subscribe(mutations: ["addParticipant"])
  addedMessage(input: AddMessageSubscriptionInput!): Message!
    @aws_subscribe(mutations: ["addMessage"])
}

input AddedParticipantSubscriptionInput {
  userID: ID!
}

input AddMessageSubscriptionInput {
  conversationID: ID!
}
